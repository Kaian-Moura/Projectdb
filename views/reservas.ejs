<!DOCTYPE html>
<html>
  <head>
    <title>Sistema de Reserva de Salas</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/styles/main.css" />
    <link rel="stylesheet" href="/styles/reservas.css" />
  </head>
  <body>
    <div class="container">
      <h1>Sistema de Reserva de Salas</h1>

      <% if (typeof erro !== 'undefined' && erro) { %>
      <div class="erro"><%= erro %></div>
      <% } %>

      <div class="form-section">
        <h2>Reservar Sala</h2>
        <form id="reservationForm" action="/api/reservas" method="post">
          <input type="hidden" id="reservationId" name="id" />

          <div class="form-group">
            <label for="sala">Sala:</label>
            <select id="sala" name="sala_id" required>
              <option value="">Selecione uma sala</option>
              <% if (salas && salas.length > 0) { %> <%
              salas.forEach(function(sala) { %>
              <option value="<%= sala.id %>">
                <%= sala.nome %> (Cap: <%= sala.capacidade %>) - <%=
                sala.localizacao %>
              </option>
              <% }); %> <% } %>
            </select>
          </div>

          <div class="form-group">
            <label for="usuario_nome">Seu Nome:</label>
            <input type="text" id="usuario_nome" name="usuario_nome" required />
          </div>

          <div class="form-group">
            <label>Data da Reserva:</label>
            <div class="date-selection" id="dateSelection"></div>
          </div>

          <div class="form-group">
            <label>Horários Disponíveis:</label>
            <div class="time-slot-selection" id="timeSlotSelection"></div>
          </div>

          <!-- Campos ocultos para armazenar data/hora -->
          <div class="hidden-inputs">
            <input
              type="datetime-local"
              id="data_inicio"
              name="data_inicio"
              required
            />
            <input
              type="datetime-local"
              id="data_fim"
              name="data_fim"
              required
            />
          </div>

          <div class="form-group">
            <label for="proposito">Propósito da Reserva:</label>
            <textarea
              id="proposito"
              name="proposito"
              rows="3"
              placeholder="Descreva brevemente o propósito da sua reserva"
            ></textarea>
          </div>

          <button type="submit">Reservar Sala</button>
        </form>
      </div>

      <div class="filter-section">
        <h2>Minhas Reservas</h2>
        <div class="form-group">
          <label for="filterName">Filtrar por nome:</label>
          <input
            type="text"
            id="filterName"
            placeholder="Digite seu nome para ver suas reservas"
          />
          <button id="filterButton">Filtrar</button>
          <button id="clearFilter">Limpar Filtro</button>
        </div>
      </div>

      <h2>Todas as Reservas</h2>
      <% if (reservas && reservas.length > 0) { %>
      <table>
        <thead>
          <tr>
            <th>Sala</th>
            <th>Responsável</th>
            <th>Início</th>
            <th>Término</th>
            <th>Propósito</th>
            <th>Status</th>
            <th>Ações</th>
          </tr>
        </thead>
        <tbody>
          <% reservas.forEach(function(reserva) { %>
          <tr
            data-id="<%= reserva.id %>"
            data-sala="<%= reserva.sala_id %>"
            data-usuario="<%= reserva.usuario_nome %>"
            data-proposito="<%= reserva.proposito || '' %>"
            data-inicio="<%= reserva.data_inicio %>"
            data-fim="<%= reserva.data_fim %>"
          >
            <td><%= reserva.sala_nome %></td>
            <td><%= reserva.usuario_nome %></td>
            <td><%= formatDate(reserva.data_inicio) %></td>
            <td><%= formatDate(reserva.data_fim) %></td>
            <td><%= reserva.proposito || '-' %></td>
            <td><%= reserva.status || 'confirmada' %></td>
            <td class="actions">
              <button
                class="btn-delete"
                onclick="deleteReservation('<%= reserva.id %>')"
              >
                Cancelar
              </button>
            </td>
          </tr>
          <% }); %>
        </tbody>
      </table>
      <% } else { %>
      <p>Nenhuma reserva disponível no momento.</p>
      <% } %>

      <a href="/" class="home-link">Voltar para página inicial</a>
    </div>

    <div id="confirmationModal" class="modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <div class="modal-icon">✓</div>
        <h3 class="modal-title">Reserva Confirmada</h3>
        <p class="modal-message">Sua reserva foi realizada com sucesso!</p>
        <div class="modal-buttons">
          <button id="closeModal" class="btn-primary">OK</button>
        </div>
      </div>
    </div>

    <script>
      // Definir data atual e criar datas futuras
      const currentYear = 2025; // Simulando que estamos em 2025
      const currentDate = new Date(currentYear, 0, 1); // 1 de Janeiro de 2025

      // Gerar datas para os próximos 14 dias
      function generateDateOptions() {
        const dateSelection = document.getElementById("dateSelection");
        dateSelection.innerHTML = "";

        for (let i = 0; i < 14; i++) {
          const date = new Date(currentDate);
          date.setDate(date.getDate() + i);

          const dateOption = document.createElement("div");
          dateOption.classList.add("date-option");
          dateOption.dataset.date = formatDateValue(date);

          const dayOfWeek = ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"][
            date.getDay()
          ];
          const day = date.getDate();
          const month = date.getMonth() + 1;

          dateOption.innerHTML = `${dayOfWeek}, ${day}/${month}`;
          dateOption.addEventListener("click", selectDate);

          dateSelection.appendChild(dateOption);
        }
      }

      // Gerar opções de horário
      function generateTimeSlots(selectedDate) {
        const timeSlotSelection = document.getElementById("timeSlotSelection");
        timeSlotSelection.innerHTML = "";

        // Horários disponíveis (em intervalos de 1 hora)
        const availableSlots = [
          { start: "08:00", end: "09:00" },
          { start: "09:00", end: "10:00" },
          { start: "10:00", end: "11:00" },
          { start: "11:00", end: "12:00" },
          { start: "13:00", end: "14:00" },
          { start: "14:00", end: "15:00" },
          { start: "15:00", end: "16:00" },
          { start: "16:00", end: "17:00" },
          { start: "17:00", end: "18:00" },
        ];

        availableSlots.forEach((slot) => {
          const timeSlot = document.createElement("div");
          timeSlot.classList.add("time-slot");
          timeSlot.dataset.startTime = slot.start;
          timeSlot.dataset.endTime = slot.end;
          timeSlot.innerHTML = `${slot.start} - ${slot.end}`;

          // Verificar se o horário está disponível (simulado)
          // Aqui você pode adicionar lógica para verificar reservas existentes
          const isAvailable = Math.random() > 0.3; // Simulação: 70% disponível

          if (!isAvailable) {
            timeSlot.classList.add("unavailable");
          } else {
            timeSlot.addEventListener("click", selectTimeSlot);
          }

          timeSlotSelection.appendChild(timeSlot);
        });
      }

      // Selecionar uma data
      function selectDate(e) {
        // Limpar seleções anteriores
        document.querySelectorAll(".date-option.selected").forEach((el) => {
          el.classList.remove("selected");
        });

        e.target.classList.add("selected");
        const selectedDate = e.target.dataset.date;

        // Gerar horários disponíveis para esta data
        generateTimeSlots(selectedDate);

        // Limpar seleção de horário
        document.querySelectorAll(".time-slot.selected").forEach((el) => {
          el.classList.remove("selected");
        });

        // Limpar campos de data/hora
        document.getElementById("data_inicio").value = "";
        document.getElementById("data_fim").value = "";
      }

      // Selecionar um horário
      function selectTimeSlot(e) {
        // Evitar seleção de slots indisponíveis
        if (e.target.classList.contains("unavailable")) {
          return;
        }

        // Limpar seleções anteriores
        document.querySelectorAll(".time-slot.selected").forEach((el) => {
          el.classList.remove("selected");
        });

        e.target.classList.add("selected");

        // Preencher campos ocultos de data/hora
        const selectedDateEl = document.querySelector(".date-option.selected");
        if (!selectedDateEl) return;

        const selectedDate = selectedDateEl.dataset.date;
        const startTime = e.target.dataset.startTime;
        const endTime = e.target.dataset.endTime;

        document.getElementById(
          "data_inicio"
        ).value = `${selectedDate}T${startTime}`;
        document.getElementById(
          "data_fim"
        ).value = `${selectedDate}T${endTime}`;
      }

      // Formatar data para valor de input
      function formatDateValue(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const day = String(date.getDate()).padStart(2, "0");
        return `${year}-${month}-${day}`;
      }

      // Função para formatar data para input datetime-local
      function formatDateForInput(dateString) {
        if (!dateString) return "";
        try {
          const date = new Date(dateString);
          if (isNaN(date.getTime())) {
            console.warn("Data inválida:", dateString);
            return "";
          }
          const year = date.getFullYear();
          const month = String(date.getMonth() + 1).padStart(2, "0");
          const day = String(date.getDate()).padStart(2, "0");
          const hours = String(date.getHours()).padStart(2, "0");
          const minutes = String(date.getMinutes()).padStart(2, "0");
          return `${year}-${month}-${day}T${hours}:${minutes}`;
        } catch (e) {
          console.error("Erro ao formatar data:", e, dateString);
          return "";
        }
      }

      // Deletar reserva
      function deleteReservation(id) {
        if (!confirm("Tem certeza que deseja cancelar esta reserva?")) return;
        fetch(`/api/reservas/${id}`, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((res) => {
            if (res.ok) {
              location.reload();
            } else {
              alert("Erro ao cancelar reserva.");
            }
          })
          .catch((err) => {
            alert("Erro ao cancelar reserva.");
            console.error(err);
          });
      }

      // Filtro por nome
      document
        .getElementById("filterButton")
        .addEventListener("click", function () {
          const filterName = document
            .getElementById("filterName")
            .value.trim()
            .toLowerCase();
          const rows = document.querySelectorAll("tbody tr");
          rows.forEach((row) => {
            const usuario = (row.dataset.usuario || "").toLowerCase();
            row.style.display =
              filterName && !usuario.includes(filterName) ? "none" : "";
          });
        });

      // Limpar filtro
      document
        .getElementById("clearFilter")
        .addEventListener("click", function () {
          document.getElementById("filterName").value = "";
          const rows = document.querySelectorAll("tbody tr");
          rows.forEach((row) => (row.style.display = ""));
        });

      // Inicializar ao carregar a página
      document.addEventListener("DOMContentLoaded", function () {
        generateDateOptions();
      });

      // Modificar o envio do formulário para usar AJAX em vez de redirecionar
      document
        .getElementById("reservationForm")
        .addEventListener("submit", function (e) {
          e.preventDefault(); // Impede o envio tradicional do formulário

          const form = this;
          const formData = new FormData(form);
          const url = form.getAttribute("action");
          const method = form.getAttribute("method"); // This will always be "post" now

          // Converter FormData para um objeto simples
          const data = {};
          formData.forEach((value, key) => {
            data[key] = value;
          });

          // Fazer a requisição usando fetch API
          fetch(url, {
            method: method,
            headers: {
              "Content-Type": "application/json",
              "X-HTTP-Method-Override":
                document.getElementById("_method")?.value || "",
            },
            body: JSON.stringify(data),
          })
            .then(async (response) => {
              // Improved error handling to extract detailed error information
              if (!response.ok) {
                const contentType = response.headers.get("content-type");
                if (contentType && contentType.includes("application/json")) {
                  // Try to get detailed error message from JSON response
                  const errorData = await response.json();
                  console.error("Error details:", errorData);
                  let errorMessage =
                    errorData.error || "Erro ao processar reserva";

                  // Add validation error details if available
                  if (errorData.details && Array.isArray(errorData.details)) {
                    errorMessage += ": " + errorData.details.join(", ");
                  }
                  throw new Error(errorMessage);
                } else {
                  throw new Error(`Erro HTTP! Status: ${response.status}`);
                }
              }
              return response.json();
            })
            .then((result) => {
              console.log("Success:", result); // Add success logging
              // Mostrar modal de confirmação
              showModal(
                "Reserva Confirmada",
                "Sua reserva foi realizada com sucesso!"
              );

              // Limpar formulário
              resetForm();

              // Após 2 segundos, recarregar a página para atualizar a lista
              setTimeout(() => {
                location.reload();
              }, 2000);
            })
            .catch((error) => {
              console.error("Error in fetch:", error);
              showModal("Erro", `Ocorreu um erro: ${error.message}`, true);
            });
        });

      // Função para exibir o modal
      function showModal(title, message, isError = false) {
        const modal = document.getElementById("confirmationModal");
        const modalTitle = modal.querySelector(".modal-title");
        const modalMessage = modal.querySelector(".modal-message");
        const modalIcon = modal.querySelector(".modal-icon");

        modalTitle.textContent = title;
        modalMessage.textContent = message;

        if (isError) {
          modalIcon.textContent = "✕";
          modalIcon.style.color = "var(--danger)";
        } else {
          modalIcon.textContent = "✓";
          modalIcon.style.color = "var(--success)";
        }

        modal.style.display = "flex";
      }

      // Fechar o modal ao clicar no botão de fechar
      document
        .querySelector(".close-modal")
        .addEventListener("click", function () {
          document.getElementById("confirmationModal").style.display = "none";
        });

      // Fechar o modal ao clicar no botão OK
      document
        .getElementById("closeModal")
        .addEventListener("click", function () {
          document.getElementById("confirmationModal").style.display = "none";
        });

      // Resetar o formulário
      function resetForm() {
        const form = document.getElementById("reservationForm");
        form.reset();
        document.getElementById("reservationId").value = "";
        document.getElementById("data_inicio").value = "";
        document.getElementById("data_fim").value = "";

        // Limpar seleções de data e hora
        document
          .querySelectorAll(".date-option.selected, .time-slot.selected")
          .forEach((el) => {
            el.classList.remove("selected");
          });

        // Always use creation mode (no more edit mode)
        form.action = "/api/reservas";
        form.setAttribute("method", "post");
        
        // Remove field _method if it exists
        let methodInput = document.getElementById("_method");
        if (methodInput) {
          methodInput.remove();
        }
      }
    </script>
  </body>
</html>